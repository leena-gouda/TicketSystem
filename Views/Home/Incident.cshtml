@model IncidentModel
@{
        var ticket = Model?.Ticket;
    var attachmentName = Model?.Ticket?.AttachmentName ?? "No attachment name";
    var attachmentPath = Model?.Ticket?.AttachmentPath ?? "#";
    var openDate = Model?.openDate != null
        ? Model.openDate.ToString("yyyy-MM-dd")
        : "No date";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />

@* @Html.Raw(@"<style>
    .custom-scroll {
        width: 100%;
        max-height: 200px;
        overflow: auto;
        border: 1px solid #ccc;
        border-left: 4px solid #1a73e8;
        background-color: #ffffff;
        padding: 1rem;
        border-radius: 0.25rem;
    }
    .custom-scroll::-webkit-scrollbar {
      width: 10px;
    }
    .custom-scroll::-webkit-scrollbar-thumb {
      background: #888;
      border-radius: 5px;
    }

    .custom-scroll::-webkit-scrollbar-thumb:hover {
        background: #555;
    }
    .text-welcome {
        color: #1a73e8;
    }

    .btn-blue {
        background-color: #1a73e8;
        color: #fff;
        border: none;
        transition: background-color 0.3s ease;
    }

        .btn-blue:hover {
            background-color: #155ab6;
        }

    .form-label {
        font-weight: 600;
        color: #1a73e8;
    }

    .form-control,
    .form-select {
        border-radius: 0.25rem;
        border-color: #1a73e8;
    }

    .card {
        border: none;
        border-radius: 0.5rem;
        box-shadow: 0 0 10px rgba(0,0,0,0.05);
    }

    .fade-in {
        animation: fadeIn 0.7s ease-in-out;
    }

    @keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .form-text.text-muted {
        font-size: 0.875rem;
    }

    .list-group-item {
        border-left: 4px solid #1a73e8;
    }
</style") *@


@Html.Raw(@"<style>
    :root {
    --nude-bg: #fdf8f3;
    --nude-surface: #fff;
    --nude-accent: #d4b49e;
    --nude-accent-hover: #c6a086;
    --nude-text: #5a4a3f;
    --nude-muted: #a89b90;
    --nude-border: #e3d6cb;
    --nude-shadow: rgba(0, 0, 0, 0.06);
    }
    
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }
    body {
        background-color: var(--nude-bg);
        font-family: 'Lora', serif;
        color: var(--nude-text);
    }


    .custom-scroll {
        width: 100%;
        max-height: 200px;
        overflow: auto;
        border: 1px solid var(--nude-muted);
        border-left: 4px solid var(--nude-primary);
        background-color: #fff;
        padding: 1rem;
        border-radius: 0.5rem;
    }

        .custom-scroll::-webkit-scrollbar {
            width: 10px;
        }

        .custom-scroll::-webkit-scrollbar-track {
            background: var(--scroll-track);
        }

        .custom-scroll::-webkit-scrollbar-thumb {
            background: var(--scroll-thumb);
            border-radius: 6px;
        }

            .custom-scroll::-webkit-scrollbar-thumb:hover {
                background: var(--scroll-hover);
            }
    .text-welcome {
            color: var(--nude-accent);
            font-weight: 500;
            letter-spacing: 0.5px;
        }
  .btn-nude {
        background-color: var(--nude-accent);
        color: #fff;
        padding: 0.6rem 1.2rem;
        border-radius: 0.375rem;
        font-size: 1rem;
        border: none;
        transition: background-color 0.3s ease, box-shadow 0.3s ease;
    }

        .btn-nude:hover {
            background-color: var(--btn-hover);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
.btn-outline-nude {
        border: 2px solid var(--nude-primary);
        color: var(--nude-primary);
        background-color: transparent;
        padding: 0.6rem 1.2rem;
        border-radius: 0.375rem;
        transition: all 0.3s ease;
    }

    .btn-outline-nude:hover {
        background-color: var(--nude-light);
        box-shadow: inset 0 0 0 1000px rgba(212,180,158,0.05);
    }

        }
    .form-control {
        border: 1px solid var(--nude-border);
        border-radius: 0.5rem;
        padding: 0.75rem;
        font-size: 0.95rem;
        background-color: #fff;
        color: var(--nude-dark);
        transition: border-color 0.3s ease;
    }

        .form-control:focus {
            border-color: var(--nude-accent);
            outline: none;
            box-shadow: 0 0 0 2px rgba(212, 180, 158, 0.2);
        }

    .form-label {
        font-weight: 500;
        color: var(--nude-dark);
        margin-bottom: 0.25rem;
    }

     .card {
        border: none;
        background-color: #fff;
        box-shadow: 0 4px 12px var(--card-shadow);
        border-radius: 0.75rem;
    }

    .card-header {
        background-color: var(--nude-accent);
        color: #fff;
        font-weight: 600;
        border-radius: 0.75rem 0.75rem 0 0;
        padding: 1rem;
    }

    .fade-in {
        animation: fadeIn 0.7s ease-in-out;
    }

    @keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    

    .list-group-item {
        border-left: 4px solid var(--nude-primary);
    }

    #watcherList {
        display: flex;           /* Or use block */
        flex-wrap: wrap;
        margin-top: 1rem;
        position: relative;      /* Prevent accidental overlay */
        z-index: 1;              /* Keep it below labels */
    }

</style>")



<div class="container mt-4 fade-in">
        @* @if (!string.IsNullOrEmpty(Model.Ticket.AttachmentPath))
        {
            <div class="mb-3">
                <label asp-for="Ticket.AttachmentName" class="form-label fw-bold">Manage Attachments</label>
                <label asp-for="Ticket.AttachmentName" class="form-label">
                    <i class="fas fa-file me-2"></i>
                </label>
                <label asp-for="Ticket.AttachmentName" class="form-label">@Model.Ticket.AttachmentName</label>
                <a asp-for="Ticket.AttachmentPath" href="@Url.Content(Model.Ticket.AttachmentPath)" target="_blank" class="form-label">
                    [view]
                </a>
                <label asp-for="openDate" class="form-label">@Model.openDate</label>
                
            </div>
        } *@
        @* @if (!string.IsNullOrEmpty(Model?.Ticket?.AttachmentPath))
        {
            <div class="mb-3">
                <label class="form-label fw-bold">Manage Attachments</label>
                <label class="form-label">
                    <i class="fas fa-file me-2"></i>
                </label>

                <label class="form-label">
                    @Model?.Ticket?.AttachmentName ?? "No attachment name"
                </label>

                <a href="@Url.Content(Model?.Ticket?.AttachmentPath ?? "#")" target="_blank" class="form-label">
                    [view]
                </a>

                <label class="form-label">
                    @Model?.openDate.ToString("yyyy-MM-dd")
                </label>
            </div>
        } *@

        @if (ticket != null && !string.IsNullOrEmpty(attachmentPath))
        {

            <div class="mb-3">
                <label class="form-label fw-bold">Manage Attachments</label>
                <label class="form-label"><i class="fas fa-file me-2"></i></label>
                <label class="form-label">@attachmentName</label>
                <a href="@(string.IsNullOrWhiteSpace(attachmentPath) || attachmentPath == "#" ? "#" : Url.Content(attachmentPath))" target="_blank" class="form-label">[view]</a>
                @* <a href="@Url.Content(attachmentPath)" target="_blank" class="form-label">[view]</a> *@
                <label class="form-label">@openDate</label>
            </div>
        }

        <div class="mb-3">
            <input type="text" id="disabledTextBox" disabled value="You can see this incident and partcipate adding comments as you are a member of the Watch list" class="form-control"/>
        </div>

        <div class="row mb-3 align-items-center">
            <div class="col-md-6">
                <div class="d-flex align-items-center">
                    <label asp-for="Id" class="form-label me-2" style="min-width: 80px;">Number</label>
                    <input asp-for="Id" type="text" disabled value="@Model.Id" class="form-control form-control-sm" style="width: 150px;" />
                </div>
            </div>

            <div class="col-md-6">
                <div class="d-flex align-items-center ">
                    <label asp-for="State" class="form-label me-2" style="min-width: 80px;">State</label>
                    <input asp-for="State" class="form-control form-control-sm" style="width: 150px;" type="text" disabled value="@Model.State.ToString()" />
                </div>
            </div>
        </div>

        <div class="row mb-3 align-items-center">
            <div class="col-md-6">
                <div class="d-flex align-items-center">
                    <label asp-for="caller.Login.Name" class="form-label me-2" style="min-width: 80px;">Caller</label>
                <input asp-for="caller.Login.Name" type="text" disabled value="@Model.caller.Login.Name" class="form-control form-control-sm" style="width: 150px;" />
                </div>
            </div>

            <div class="col-md-6">
                <div class="d-flex align-items-center ">
                    <label asp-for="openDate" class="form-label me-2" style="min-width: 80px;">opened</label>
                    <input asp-for="openDate" class="form-control form-control-sm" style="width: 150px;" type="text" disabled value="@Model.openDate" /><br />
                </div>
            </div>
        </div>

        
        <div class="row mb-3 align-items-start">
            <div class="col-md-6">
                <div class="d-flex align-items-center">
                    <label asp-for="Ticket.ServiceType" class="form-label me-2" style="min-width: 80px;">Service</label>
                    <input asp-for="Ticket.ServiceType" class="form-control form-control-sm" style="width: 150px; type="text" disabled value="@Model.Ticket.ServiceType" />
                </div>
            </div>

            <div class="col-md-6">
                <div class="d-flex align-items-center ">
                    <label asp-for="closedDate" class="form-label me-2" style="min-width: 80px;">Closed</label>
                    <input asp-for="closedDate" type="text" class="form-control form-control-sm" style="width: 150px;" disabled value="@Model.closedDate" />
                </div>
            </div>
        </div>
        

        <div class="mb-3">
            <div class="d-flex align-items-center ">
                <label asp-for="Ticket.Impact" class="form-label me-2" style="min-width: 80px;">Priority</label>
                <input asp-for="Ticket.Impact" class="form-control form-control-sm" style="width: 150px;" type="text" disabled value="@Model.Ticket.Impact" /><br />
            </div>
        </div>

        <div class="mb-3">
                <label asp-for="Ticket.ShortDescription" class="form-label" >Short description</label>
                <input asp-for="Ticket.ShortDescription" class="form-control"  type="text" disabled value="@Model.Ticket.ShortDescription" /><br />
        </div>

        <div class="mb-3">
                <label asp-for="Ticket.Description" class="form-label" style="min-width: 80px;">Description</label>
                <input asp-for="Ticket.Description" class="form-control" type="text" disabled value="@Model.Ticket.Description" /><br />
        </div>

        <div class="mb-3">
            <div id="watcherList" class="row d-none">
                @if (ViewBag.Watchers is List<LoginModel> watchers && watchers.Any())
                {
                    @foreach (var watcher in ViewBag.Watchers as List<LoginModel>)
                    {
                        <div class="watcher-item col-md-4 mb-3" data-id="@watcher.Id" data-name="@watcher.Name" data-role="@watcher.Role"
                            data-email="@watcher.Email">
                            <div class="card h-100 shadow-sm select-watcher" style="cursor: pointer;">
                                <div class="card-body text-center">
                                    <h5 class="card-title">@watcher.Name</h5>
                                </div>
                            </div>
                        </div>
                    }
                }
            
            </div>

            @if (Model?.Ticket?.TicketWatchers?.Any() == true)
            {
                bool isCaller = Model.caller?.Login?.Id == ViewBag.userId;
                <div class="d-flex align-items-center justify-content-between mb-2">
                     <div class="d-flex align-items-center gap-2">
                         <label asp-for="Ticket.TicketWatchers" class="form-label">Watch list</label>
                        <label asp-for="Ticket.TicketWatchers" class="form-label">
                            <i class="fas fa-lock me-2"></i>
                        </label>
                     </div>
                     @if (isCaller)
                    {
                        <div class="d-flex justify-content-end">
                            <button class="btn btn-nude" id="editBtn" onclick="toggleEditMode()">Edit</button>
                        </div> 
                    }                    
                </div>

                if (isCaller)
                {
                    <div class="mb-3">
                         <input type="text" id="searchBox" class="form-control mb-2 d-none" placeholder="Search for a name..." onkeyup="searchWatcher()" />
                            <div id="selectedNames" class="list-group mb-2 d-none"></div>
                            <div id="watcherList" class="row d-none fade-in"></div>
                    </div>
                }
                <form asp-controller="Home" asp-action="Incident" asp-route-id="@Model.Id" method="post">

                    <ul class="list-group" id="watchListContainer">

                         @foreach (var watcher in Model.Ticket.TicketWatchers)
                         {
                              var login = watcher?.Watcher?.Login;
                              <li class="list-group-item watch-item  fade-in" style="border-left: 4px solid var(--nude-accent); background-color: var(--nude-surface); color: var(--nude-text);"     data-id="@login?.Id" ondblclick="removeWatcher(this)">
                                  <strong>@login?.Name </strong> - @login?.Role (<em>@login?.Email </em>)
                                  @* <input type="hidden" id="@login?.Id" name="SelectedWatcherIds" value="@login?.Id" /> *@
                                  @if (login?.Id != null)
                                {
                                    <input type="hidden" name="SelectedWatcherIds" value="@login.Id" />
                                }

                              </li>     
                        }   
                    </ul>
                    <div id="submitBtnContainer" class="mt-3"></div>
                </form>
            }
            
        </div>
        <script>
            function toggleEditMode() {
                const list = document.getElementById('watchListContainer');
                const searchBox = document.getElementById('searchBox');
                const selectedNames = document.getElementById('selectedNames');
                const watcherList = document.getElementById('watcherList');

                list.classList.toggle('editable');
                searchBox.classList.toggle('d-none');
                selectedNames.classList.toggle('d-none');
                watcherList.classList.add('d-none');
            }

            function removeWatcher(element) {
                if (document.getElementById('watchListContainer').classList.contains('editable')) {
                    element.remove();
                }
            }

            function searchWatcher() {
                const filter = document.getElementById("searchBox").value.toLowerCase();
                const watcherList = document.getElementById("watcherList");
                const items = watcherList.querySelectorAll(".watcher-item");

                let matches = false;
                items.forEach(item => {
                    const name = item.getAttribute("data-name").toLowerCase();
                    const isMatch = name.includes(filter) && filter !== "";
                    item.classList.toggle("d-none", !isMatch);
                    if (isMatch) 
                    {
                        item.classList.remove("d-none");
                        matches = true;
                    }
                    else 
                    {
                        item.classList.add("d-none");
                    }
                });

                watcherList.classList.toggle("d-none", !matches);
            }
            document.addEventListener("DOMContentLoaded", function () {
                const watcherList = document.getElementById("watcherList");

                watcherList.addEventListener("click", function (e) {
                    const card = e.target.closest(".select-watcher");
                    if (!card) return;

                    const item = card.closest(".watcher-item");
                    const name = item.getAttribute("data-name");
                    const role = item.getAttribute("data-role") || "Role";
                    const email = item.getAttribute("data-email") || "email@example.com";
                    const id = item.getAttribute("data-id");
                    const input = document.createElement("input");

                    input.type = "hidden";
                    input.name = "SelectedWatcherIds";
                    input.value = id;

                    const existing = Array.from(document.querySelectorAll("#watchListContainer .list-group-item"))
                        .some(el => el.textContent.includes(name));
                    if (existing) return;

                    const li = document.createElement("li");
                    li.className = "list-group-item watch-item";
                    li.style.borderLeft = "4px solid var(--nude-accent)";
                    li.style.backgroundColor = "var(--nude-surface)";
                    li.style.color = "var(--nude-text)";
                    li.innerHTML = `<strong>${name}</strong> - ${role} (<em>${email}</em>)`;
                    li.setAttribute("data-id", id);
                    li.appendChild(input);
                    li.classList.add("fade-in");

                    li.ondblclick = function () {
                        this.remove();
                    };
                    
                    console.log("Selected Watcher ID:", id);
                    document.getElementById("watchListContainer").appendChild(li);

                    const submitBtnContainer = document.getElementById("submitBtnContainer");
                    if (!submitBtnContainer.querySelector("button")) {
                        const submitBtn = document.createElement("button");
                        submitBtn.type = "submit";
                        submitBtn.className = "btn btn-nude";
                        submitBtn.textContent = "Save Watchlist";
                        submitBtnContainer.appendChild(submitBtn);
                    }

                });
            });


        </script>
    <div class="card p-4 mb-4">
        <form asp-controller="Home" asp-action="Incident" method="post">

            <input type="hidden" name="id" value="@Model.Id" />
            <div class="mb-3">
                <label asp-for="AdditionalComments" class="form-label">Additional comments (caller visible) </label>
                <textarea asp-for="AdditionalComments" name="AdditionalComments" class="form-control" rows="4" maxlength="4000" placeholder="Enter your comment" id="commentBox"></textarea>
                <small id="charCounter" class="form-text text-muted">4000 characters remaining</small>
            </div>
        </form>
    </div>
           

        @section Scripts {
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script>
                 document.addEventListener("DOMContentLoaded", function () {
                    const commentBox = document.getElementById("commentBox");
                    const charCounter = document.getElementById("charCounter");
                    const maxLength = 4000;

                    if (!commentBox || !charCounter) {
                        console.warn("Comment box or counter not found.");
                        return;
                    }
                commentBox.addEventListener("input", () => {
                    const remaining = maxLength - commentBox.value.length;
                    charCounter.textContent = `${remaining} characters remaining`;
                });
                commentBox.addEventListener("keydown", function(event) {
                    if (event.key === "Enter" && !event.shiftKey) {
                        event.preventDefault();
                        if (commentBox.value.trim() !== "") {
                            // commentBox.closest("form").submit();
                        submitCommentAjax();
                        }
                    }
                });

                           function submitCommentAjax() {
                const form = commentBox.closest("form");
                          if (!form) return;
                $.ajax({
                    url: form.action,
                    method: "POST",
                    data: $(form).serialize(),
                    headers: { "X-Requested-With": "XMLHttpRequest" },
                    success: function (partialHtml) {
                        $('#commentsContainer').html(partialHtml);
                        commentBox.value = "";
                        charCounter.textContent = "4000 characters remaining";
                    },
                    error: function () {
                        alert("Failed to submit comment.");
                    }
                });
            }
          });
            

            </script>
        }

    <div id="commentsContainer">
        @await Html.PartialAsync("PreviousCommentsPartial", Model)
    </div>

    <div class="text-center mt-4 mb-5">
      <a href="@Url.Action("Dashboard", "Home")" class="btn btn-nude rounded-pill px-4">
        <i class="fas fa-tachometer-alt me-2"></i> Go to Dashboard
      </a>
    </div>


        @* <div class="mb-3">
            <label asp-for="previousComments" class="form-label">Previous comments</label>
            <div class="row">
                <label asp-for="previousComments" class="form-label"> #@Model.closedDate - #@Model.Watcher.Name</label>
                <label asp-for="previousComments" class="form-label"> Additional comments (caller visible) </label>
                <label asp-for="previousComments" class="form-label"> #@Model.AdditionalComments</label>
            </div>
        </div> *@

    @* <div class="mb-4" id="commentsContainer">
            <label class="form-label">Previous Comments</label>
            <div class="custom-scroll"> 
                @if (Model.previousComments != null && Model.previousComments.Any())
                {
                    foreach (var comment in Model.previousComments)
                    {
                        <div class="border-bottom pb-2 mb-3">
                        <small class="text-muted">@comment.ClosedTime - @comment.Login.Email</small>
                            <p class="mb-1">@comment.CommentText</p>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">No comments yet.</p>
                }

            </div>
        </div> *@

    </div>

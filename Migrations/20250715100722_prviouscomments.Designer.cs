// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketSystem.Data;

#nullable disable

namespace TicketSystem.Migrations
{
    [DbContext(typeof(TicketSystemDBContext))]
    [Migration("20250715100722_prviouscomments")]
    partial class prviouscomments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketSystem.Models.IncidentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("WatcherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("closedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("openDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("WatcherId");

                    b.ToTable("Incident");
                });

            modelBuilder.Entity("TicketSystem.Models.PreviousComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.ToTable("PreviousComments");
                });

            modelBuilder.Entity("TicketSystem.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Impact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketSystem.Models.TicketWatcher", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("WatcherId")
                        .HasColumnType("int");

                    b.Property<int?>("IncidentModelId")
                        .HasColumnType("int");

                    b.HasKey("TicketId", "WatcherId");

                    b.HasIndex("IncidentModelId");

                    b.HasIndex("WatcherId");

                    b.ToTable("TicketWatchers");
                });

            modelBuilder.Entity("TicketSystem.Models.Watcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("watcher");
                });

            modelBuilder.Entity("TicketSystem.Models.IncidentModel", b =>
                {
                    b.HasOne("TicketSystem.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.Models.Watcher", "Watcher")
                        .WithMany()
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("Watcher");
                });

            modelBuilder.Entity("TicketSystem.Models.PreviousComments", b =>
                {
                    b.HasOne("TicketSystem.Models.IncidentModel", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");
                });

            modelBuilder.Entity("TicketSystem.Models.TicketWatcher", b =>
                {
                    b.HasOne("TicketSystem.Models.IncidentModel", null)
                        .WithMany("IncidentWatchers")
                        .HasForeignKey("IncidentModelId");

                    b.HasOne("TicketSystem.Models.Ticket", "Ticket")
                        .WithMany("TicketWatchers")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.Models.Watcher", "Watcher")
                        .WithMany("TicketWatchers")
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("Watcher");
                });

            modelBuilder.Entity("TicketSystem.Models.IncidentModel", b =>
                {
                    b.Navigation("IncidentWatchers");
                });

            modelBuilder.Entity("TicketSystem.Models.Ticket", b =>
                {
                    b.Navigation("TicketWatchers");
                });

            modelBuilder.Entity("TicketSystem.Models.Watcher", b =>
                {
                    b.Navigation("TicketWatchers");
                });
#pragma warning restore 612, 618
        }
    }
}

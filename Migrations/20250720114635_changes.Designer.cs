// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketSystem.Data;

#nullable disable

namespace TicketSystem.Migrations
{
    [DbContext(typeof(TicketSystemDBContext))]
    [Migration("20250720114635_changes")]
    partial class changes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketSystem.Models.Caller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoginId");

                    b.ToTable("callers");
                });

            modelBuilder.Entity("TicketSystem.Models.DashboardModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateIncidentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCaller")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWatcher")
                        .HasColumnType("bit");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateIncidentId");

                    b.HasIndex("userId");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("TicketSystem.Models.IncidentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DashboardModelId")
                        .HasColumnType("int");

                    b.Property<int?>("DashboardModelId1")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("callerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("closedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("openDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DashboardModelId");

                    b.HasIndex("DashboardModelId1");

                    b.HasIndex("TicketId");

                    b.HasIndex("callerId");

                    b.ToTable("Incident");
                });

            modelBuilder.Entity("TicketSystem.Models.LoginModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isCaller")
                        .HasColumnType("bit");

                    b.Property<bool>("isWatcher")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TicketSystem.Models.PreviousComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.HasIndex("LoginId");

                    b.ToTable("PreviousComments");
                });

            modelBuilder.Entity("TicketSystem.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DashboardModelId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Impact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DashboardModelId");

                    b.HasIndex("LoginId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketSystem.Models.TicketWatcher", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("WatcherId")
                        .HasColumnType("int");

                    b.Property<int?>("IncidentModelId")
                        .HasColumnType("int");

                    b.HasKey("TicketId", "WatcherId");

                    b.HasIndex("IncidentModelId");

                    b.HasIndex("WatcherId");

                    b.ToTable("TicketWatchers");
                });

            modelBuilder.Entity("TicketSystem.Models.Watcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoginId");

                    b.ToTable("watcher");
                });

            modelBuilder.Entity("TicketSystem.Models.Caller", b =>
                {
                    b.HasOne("TicketSystem.Models.LoginModel", "Login")
                        .WithMany()
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("TicketSystem.Models.DashboardModel", b =>
                {
                    b.HasOne("TicketSystem.Models.IncidentModel", "CreateIncident")
                        .WithMany()
                        .HasForeignKey("CreateIncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.Models.LoginModel", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateIncident");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TicketSystem.Models.IncidentModel", b =>
                {
                    b.HasOne("TicketSystem.Models.DashboardModel", null)
                        .WithMany("WatcherIncidents")
                        .HasForeignKey("DashboardModelId");

                    b.HasOne("TicketSystem.Models.DashboardModel", null)
                        .WithMany("callerIncidents")
                        .HasForeignKey("DashboardModelId1");

                    b.HasOne("TicketSystem.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.Models.Caller", "caller")
                        .WithMany("incidents")
                        .HasForeignKey("callerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("caller");
                });

            modelBuilder.Entity("TicketSystem.Models.PreviousComments", b =>
                {
                    b.HasOne("TicketSystem.Models.IncidentModel", "Incident")
                        .WithMany("previousComments")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.Models.LoginModel", "Login")
                        .WithMany()
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("Login");
                });

            modelBuilder.Entity("TicketSystem.Models.Ticket", b =>
                {
                    b.HasOne("TicketSystem.Models.DashboardModel", null)
                        .WithMany("CreateTickets")
                        .HasForeignKey("DashboardModelId");

                    b.HasOne("TicketSystem.Models.LoginModel", "Login")
                        .WithMany()
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("TicketSystem.Models.TicketWatcher", b =>
                {
                    b.HasOne("TicketSystem.Models.IncidentModel", null)
                        .WithMany("IncidentWatchers")
                        .HasForeignKey("IncidentModelId");

                    b.HasOne("TicketSystem.Models.Ticket", "Ticket")
                        .WithMany("TicketWatchers")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.Models.Watcher", "Watcher")
                        .WithMany("TicketWatchers")
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("Watcher");
                });

            modelBuilder.Entity("TicketSystem.Models.Watcher", b =>
                {
                    b.HasOne("TicketSystem.Models.LoginModel", "Login")
                        .WithMany()
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("TicketSystem.Models.Caller", b =>
                {
                    b.Navigation("incidents");
                });

            modelBuilder.Entity("TicketSystem.Models.DashboardModel", b =>
                {
                    b.Navigation("CreateTickets");

                    b.Navigation("WatcherIncidents");

                    b.Navigation("callerIncidents");
                });

            modelBuilder.Entity("TicketSystem.Models.IncidentModel", b =>
                {
                    b.Navigation("IncidentWatchers");

                    b.Navigation("previousComments");
                });

            modelBuilder.Entity("TicketSystem.Models.Ticket", b =>
                {
                    b.Navigation("TicketWatchers");
                });

            modelBuilder.Entity("TicketSystem.Models.Watcher", b =>
                {
                    b.Navigation("TicketWatchers");
                });
#pragma warning restore 612, 618
        }
    }
}
